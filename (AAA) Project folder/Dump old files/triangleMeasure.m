function [ movingPtsB ] = triangleMeasure( movingPtsA, vanishingPtsA, vanishingptsB  )
%UNTITLED3 Summary of this function goes here
    movingPtsB = zeros(size(movingPtsA));
    for i = 1:size(movingPtsA);
        %% Triangulation measurement (?
        % p = alpha*p1 + beta*p2 + gamma*p3
        tempVar =   -vanishingPtsA(2,1) * vanishingPtsA(3,2) + ...
                    vanishingPtsA(2,1) * vanishingPtsA(1,2) + ...
                    vanishingPtsA(1,1) * vanishingPtsA(3,2) + ... 
                    vanishingPtsA(3,1) * vanishingPtsA(2,2) - ...            
                    vanishingPtsA(3,1) * vanishingPtsA(1,2) - ...
                    vanishingPtsA(1,1) * vanishingPtsA(2,2);
        % beta = (x3*Y - x1*Y - x3*y1 - X*y3 + x1*y3 + X*y1 ) / (-x2*y3 + x2*y1 + x1*y3 + x3*y2 - x3*y1 - x1y2)       
        beta =  (vanishingPtsA(3,1) * movingPtsA(i,2) - ...
                vanishingPtsA(1,1) * movingPtsA(i,2) - ...
                vanishingPtsA(3,1) * vanishingPtsA(1,2) - ...
                movingPtsA(i,1) * vanishingPtsA(3,2) + ...
                vanishingPtsA(1,1) * vanishingPtsA(3,2) + ...
                movingPtsA(i,1) * vanishingPtsA(1,2) ) / tempVar;
        % gamma = (X*y2 - X*y1 - x1*y2 - x2*Y + x2*y1 + x1*Y) / (-x2*y3 + x2*y1 + x1*y3 + x3*y2 - x3*y1 - x1y2)
        gamma =     (movingPtsA(i,1) * vanishingPtsA(2,2) - ...
                    movingPtsA(i,1) * vanishingPtsA(1,2) - ...
                    vanishingPtsA(1,1) * vanishingPtsA(2,2) - ...
                    vanishingPtsA(2,1) * movingPtsA(i,2) + ...
                    vanishingPtsA(2,1) * vanishingPtsA(1,2) + ...
                    vanishingPtsA(1,1) * movingPtsA(i,2) ) / tempVar;
        alpha = 1 - (beta + gamma);
        movingPtsB(i,:) = alpha * vanishingptsB(1,[1,2]) + beta * vanishingptsB(2,[1,2]) + gamma * vanishingptsB(3,[1,2]);
    end
end

