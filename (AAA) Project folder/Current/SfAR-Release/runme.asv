% %% Set up system environment
% addpath(genpath('.'))               % Adding all subfolders to path
% ccc;                                % Clear up everything
% impath = 'data\DSC_0002.jpg';       % Set the path of the image
% talk = getParameter('talk');        % Flag for internediate output
% saveFig = getParameter('saveFig');  % Flag for saving figure
% if ~exist(impath,'file')            % check if the image file exists
%     error('Please enter a valid image path');
% end
% warning off all;                    % Turn off warnings
% %% Main algorithm pipeline starts from here
% tic;
% [im,K,center,LS,LS_c,X,Ladj,hFig,L,inliers] = computeSegmentation(impath,talk);
% toc;
% %% Save figures screeshot
% if saveFig
%     for i = 1:length(hFig)
%         name = [impath '_segmentation_' num2str(i) '_' get(hFig(1,i),'Name') '.jpg'];
%         print(hFig(i), '-djpeg', name);
%     end
% end
%% Random testing / experiment code
% ******** Horizontal / Vertical assumption ********
close all; clc;

Ladj_triu = inliers{1,1};
[ar, ac] = find(Ladj_triu>0);
root_name = 'D:\saveData\Img';
file_format = '.jpg';
linewidth = 2;
hFig = [];
horzVector = [1,0];
vertVector = [0,1];
colour = {'red' 'cyan'};
C = zeros(size(Ladj_triu,1));
ax = 0;
ay = 0;
az = 0;
R = makehgtform('xrotate',ax,'yrotate',ay, 'zrotate', az); R = R(1:3,1:3);
Hinv = K * R' * inv(K);
Lp = Hinv' * L;
Vp = Lp(1:2,:);
Vp = Vp./repmat(sqrt(sum(Vp.^2)),2,1);
for i=1:size(ar,1)
    hFig = [hFig az_fig];
    set(hFig(1,end),'Name','Original and Gap Filled Lines');
    imagesc(im), axis equal;
    DirVecAR = abs(LS([3,4],ar(i))' - LS([1,2],ar(i))');
    DirVecAR = DirVecAR./[norm(DirVecAR), norm(DirVecAR)];
    
    DirVecAC = abs(LS([3,4],ac(i))' - LS([1,2],ac(i))');
    DirVecAC = DirVecAC./[norm(DirVecAC), norm(DirVecAC)];
    
    horzangle = acos(dot(horzVector,DirVecAR)/norm(horzVector)/norm(DirVecAR));
    vertangle = acos(dot(vertVector,DirVecAR)/norm(vertVector)/norm(DirVecAR));
    horzangle_L = dot()
     hold on;
    if(horzangle < vertangle)
        disp('ar is probably aligned with Horizontal');
        opcode = 1;
        inplane_cost = (horzVector * Vp(:,ar(i)))^2 + (vertVector * Vp(:,ac(i)))^2;
    else
        disp('ar is probably aligned with Vertical');
        opcode = 2;
        inplane_cost = (vertVector * Vp(:,ar(i)))^2 + (horzVector * Vp(:,ac(i)))^2;
    end

    C(ar(i), ac(i)) = inplane_cost;
    plot(LS([1,3],ar(i)),LS([2,4],ar(i)),'-','color',colour{opcode},'linewidth',linewidth);
    plot(LS([1,3],ac(i)),LS([2,4],ac(i)),'-','color',colour{mod(opcode,2)+1},'linewidth',linewidth);
    pause(2);
    hold off;
    % Save figure
    % filename = [root_name, '_' num2str(i), file_format];
    % print(hFig(i), '-djpeg', filename);
     close;
end
c = sum(sum(C));

% ******** Show inliers line-pairs (no horz/vert categotise) ********
% for i=1:size(ar,1)
% %     figure(1), imshow(im);
% %     hold on;
%     hFig = [hFig az_fig];
%     set(hFig(1,end),'Name','Original and Gap Filled Lines');
%     imagesc(im), axis equal;
%     hold on
%     plot(LS([1,3],ar(i)),LS([2,4],ar(i)),'-','color','cyan','linewidth',linewidth);
%     plot(LS([1,3],ac(i)),LS([2,4],ac(i)),'-','color','red','linewidth',linewidth);
%     hold off;
%     filename = [root_name, '_' num2str(i), file_format];
%     print(hFig(i), '-djpeg', filename);
%     close;
% end

